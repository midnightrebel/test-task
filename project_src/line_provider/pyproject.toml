[build-system]
requires = ["poetry-core=1.8.4"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "line-provider"
version = "0.1.0"
description = "A test service provider of event information."
authors = ["Anton Savenchuk <Savenchuk.dev@gmail.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "3.10.15"
aio-pika = "9.5.3"
alembic = "1.14.0"
asyncpg = "0.30.0"
celery = "5.4.0"
fastapi = "0.115.6"
pydantic = "2.10.3"
pydantic-settings = "2.6.1"
sqlalchemy = "2.0.36"
uvicorn = "0.32.1"


[tool.poetry.dev-dependencies]
ruff = "*"


# ruff settings
[tool.ruff]
line-length = 80
indent-width = 4

# Exclude a variety of commonly ignored directories.
exclude = [
    ".env",
    ".git",
    ".pytest_cache",
    ".ruff_cache",
    ".venv",
    ".vscode",
    "__pycache__",
    "__pypackages__",
    "env",
    "django_cache",
    "venv",
    "tests",
]

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "S",    # flake8-bandit
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "C901", # complex-structure
]

ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    # "C901", # too complex
    "W191", # indentation contains tabs
    "F401", # imported but unused
]

[tool.ruff.lint.mccabe]
# Flag errors (`C901`) whenever the complexity level exceeds 5.
max-complexity = 5

[tool.ruff.lint.isort]
case-sensitive = false
combine-as-imports = true
force-sort-within-sections = false
known-first-party = []
known-third-party = []
lines-after-imports = 2
order-by-type = false
section-order = [
    "future",
    "standard-library",
    "third-party",
    "first-party",
    "local-folder",
]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"
